describe("uiMask",function(){var e="<form name='test'><input name='input' ng-model='x' ui-mask='{{mask}}'></form>",t="<input name='input' ng-model='x' ui-mask='{{mask}}'>",n,r,i;beforeEach(module("ui.mask")),beforeEach(inject(function(e,t,s){r=e,i=s,n=function(e){return t(e)(r)}})),describe("initialization",function(){it("should not not happen if the mask is undefined or invalid",function(){var e=n(t);r.$apply("x = 'abc123'"),expect(e.val()).toBe("abc123"),r.$apply("mask = '()_abc123'"),expect(e.val()).toBe("abc123")}),it("should mask the value only if it's valid",function(){var e=n(t);r.$apply("x = 'abc123'"),r.$apply("mask = '(A) * 9'"),expect(e.val()).toBe("(a) b 1"),r.$apply("mask = '(A) * 9 A'"),expect(e.val()).toBe("")}),it("should not dirty or invalidate the input",function(){var e=n(t);r.$apply("x = 'abc123'"),r.$apply("mask = '(9) * A'"),expect(e.hasClass("ng-pristine ng-valid")).toBeTruthy(),r.$apply("mask = '(9) * A 9'"),expect(e.hasClass("ng-pristine ng-valid")).toBeTruthy()}),it("should not change the model value",function(){r.$apply("x = 'abc123'"),r.$apply("mask = '(A) * 9'"),expect(r.x).toBe("abc123"),r.$apply("mask = '(A) * 9 A'"),expect(r.x).toBe("abc123")}),it("should set ngModelController.$viewValue to match input value",function(){n(e),r.$apply("x = 'abc123'"),r.$apply("mask = '(A) * 9'"),expect(r.test.input.$viewValue).toBe("(a) b 1"),r.$apply("mask = '(A) * 9 A'"),expect(r.test.input.$viewValue).toBe("")})}),describe("user input",function(){it("should mask-as-you-type",function(){var t=n(e),i=t.find("input");r.$apply("x = ''"),r.$apply("mask = '(A) * 9'"),i.val("a").triggerHandler("input"),expect(i.val()).toBe("(a) _ _"),i.val("ab").triggerHandler("input"),expect(i.val()).toBe("(a) b _"),i.val("ab1").triggerHandler("input"),expect(i.val()).toBe("(a) b 1")}),it("should set ngModelController.$viewValue to match input value",function(){var t=n(e),i=t.find("input");r.$apply("x = ''"),r.$apply("mask = '(A) * 9'"),i.val("a").triggerHandler("input"),i.triggerHandler("change"),expect(r.test.input.$viewValue).toBe("(a) _ _")}),it("should parse unmasked value to model",function(){var t=n(e),i=t.find("input");r.$apply("x = ''"),r.$apply("mask = '(A) * 9'"),i.val("abc123").triggerHandler("input"),i.triggerHandler("change"),expect(r.x).toBe("ab1")}),it("should set model to undefined if masked value is invalid",function(){var t=n(e),i=t.find("input");r.$apply("x = ''"),r.$apply("mask = '(A) * 9'"),i.val("a").triggerHandler("input"),i.triggerHandler("change"),expect(r.x).toBeUndefined()}),it("should not set model to an empty mask",function(){var t=n(e),i=t.find("input");r.$apply("x = ''"),r.$apply("mask = '(A) * 9'"),i.triggerHandler("input"),expect(r.x).toBe("")}),it("should not setValidity on required to false on a control that isn't required",function(){var e=n("<input name='input' ng-model='x' ui-mask='{{mask}}'>");r.$apply("x = ''"),r.$apply("mask = '(A) * 9'"),r.$apply("required = true"),expect(e.data("$ngModelController").$error.required).toBeUndefined(),e.triggerHandler("input"),expect(r.x).toBe(""),expect(e.data("$ngModelController").$error.required).toBeUndefined(),e=n("<input name='input' ng-model='x' ui-mask='{{mask}}' required>"),expect(e.data("$ngModelController").$error.required).toBeUndefined(),e.triggerHandler("input"),expect(e.data("$ngModelController").$error.required).toBe(!0),e.val("abc123").triggerHandler("input"),expect(r.x).toBe("ab1"),expect(e.data("$ngModelController").$error.required).toBe(!1),e=n("<input name='input' ng-model='x' ui-mask='{{mask}}' ng-required='required'>"),expect(e.data("$ngModelController").$error.required).toBeUndefined(),e.triggerHandler("input"),expect(e.data("$ngModelController").$error.required).toBe(!0),r.$apply("required = false"),expect(e.data("$ngModelController").$error.required).toBe(!1),e.triggerHandler("input"),expect(e.data("$ngModelController").$error.required).toBe(!1),e.triggerHandler("focus"),e.triggerHandler("blur"),expect(e.data("$ngModelController").$error.required).toBe(!1),e.val("").triggerHandler("input"),expect(e.data("$ngModelController").$error.required).toBe(!1)})}),describe("changes from the model",function(){it("should set the correct ngModelController.$viewValue",function(){n(e),r.$apply("mask = '(A) * 9'"),r.$apply("x = ''"),expect(r.test.input.$viewValue).not.toBeDefined(),r.$apply("x = 'abc'"),expect(r.test.input.$viewValue).not.toBeDefined(),r.$apply("x = 'abc123'"),expect(r.test.input.$viewValue).toBe("(a) b 1")})}),describe("default mask definitions",function(){it("should accept optional mask after '?'",function(){var e=n(t);r.$apply("x = ''"),r.$apply("mask = '**?9'"),e.val("aa").triggerHandler("input"),e.triggerHandler("blur"),expect(e.val()).toBe("aa_"),e.val("99a").triggerHandler("input"),e.triggerHandler("blur"),expect(e.val()).toBe("99_"),e.val("992").triggerHandler("input"),e.triggerHandler("blur"),expect(e.val()).toBe("992")})}),describe("placeholders",function(){it("should have default placeholder functionality",function(){var e=n(t);r.$apply("x = ''"),r.$apply("mask = '99/99/9999'"),expect(e.attr("placeholder")).toBe("__/__/____")}),it("should allow mask substitutions via the placeholder attribute",function(){var e="<input name='input' ng-model='x' ui-mask='{{mask}}' placeholder='MM/DD/YYYY'>",t=n(e);r.$apply("x = ''"),r.$apply("mask = '99/99/9999'"),expect(t.attr("placeholder")).toBe("MM/DD/YYYY"),t.val("12").triggerHandler("input"),expect(t.val()).toBe("12/DD/YYYY")}),it("should update mask substitutions via the placeholder attribute",function(){var e="<input name='input' ng-model='x' ui-mask='{{mask}}' placeholder='{{placeholder}}'>",t=n(e);r.$apply("x = ''"),r.$apply("mask = '99/99/9999'"),r.$apply("placeholder = 'DD/MM/YYYY'"),expect(t.attr("placeholder")).toBe("DD/MM/YYYY"),t.val("12").triggerHandler("input"),expect(t.val()).toBe("12/MM/YYYY"),r.$apply("placeholder = 'MM/DD/YYYY'"),expect(t.val()).toBe("12/DD/YYYY"),t.triggerHandler("blur"),expect(t.attr("placeholder")).toBe("MM/DD/YYYY")})}),describe("configuration",function(){it("should accept the new mask definition set globally",function(){i.maskDefinitions["@"]=/[fz]/;var e=n(t);r.$apply("x = ''"),r.$apply("mask = '@193'"),e.val("f123").triggerHandler("input"),e.triggerHandler("blur"),expect(e.val()).toBe("f123")}),it("should accept the new mask definition set per element",function(){delete i.maskDefinitions["@"],r.input={options:{maskDefinitions:{"@":/[fz]/}}};var e=n('<input type="text" ng-model="x" ui-mask="{{mask}}" ui-options="input.options">');r.$apply("x = ''"),r.$apply("mask = '@999'"),e.val("f111").triggerHandler("input"),e.triggerHandler("blur"),expect(e.val()).toBe("f111")})}),describe("blurring",function(){it("should clear an invalid value from the input",function(){var e=n(t);r.$apply("x = ''"),r.$apply("mask = '(9) * A'"),e.val("a").triggerHandler("input"),e.triggerHandler("blur"),expect(e.val()).toBe("")}),it("should clear an invalid value from the ngModelController.$viewValue",function(){var t=n(e),i=t.find("input");r.$apply("x = ''"),r.$apply("mask = '(A) * 9'"),i.val("a").triggerHandler("input"),i.triggerHandler("blur"),expect(r.test.input.$viewValue).toBe("")})})});