describe("uiValidate",function(){var e,t,n=function(){return!0},r=function(){return!1},i=function(e){return e};beforeEach(module("ui.validate")),beforeEach(inject(function(n,r){e=n.$new(),t=function(e,t){var n=angular.element(e),i=angular.element('<form name="form"></form>');return i.append(n),r(i)(t),t.$digest(),n}})),describe("initial validation",function(){it("should mark input as valid if initial model is valid",inject(function(){e.validate=n,t('<input name="input" ng-model="value" ui-validate="\'validate($value)\'">',e),expect(e.form.input.$valid).toBeTruthy(),expect(e.form.input.$error).toEqual({validator:!1})})),it("should mark input as invalid if initial model is invalid",inject(function(){e.validate=r,t('<input name="input" ng-model="value" ui-validate="\'validate($value)\'">',e),expect(e.form.input.$valid).toBeFalsy(),expect(e.form.input.$error).toEqual({validator:!0})}))}),describe("validation on model change",function(){it("should change valid state in response to model changes",inject(function(){e.value=!1,e.validate=i,t('<input name="input" ng-model="value" ui-validate="\'validate($value)\'">',e),expect(e.form.input.$valid).toBeFalsy(),e.$apply("value = true"),expect(e.form.input.$valid).toBeTruthy()}))}),describe("validation on element change",function(){var n;beforeEach(inject(function(e){n=e})),it("should change valid state in response to element events",function(){e.value=!1,e.validate=i;var r=t('<input name="input" ng-model="value" ui-validate="\'validate($value)\'">',e);expect(e.form.input.$valid).toBeFalsy(),r.val("true"),r.trigger(n.hasEvent("input")?"input":"change"),expect(e.form.input.$valid).toBeTruthy()})}),describe("multiple validators with custom keys",function(){it("should support multiple validators with custom keys",function(){e.validate1=n,e.validate2=r,t('<input name="input" ng-model="value" ui-validate="{key1 : \'validate1($value)\', key2 : \'validate2($value)\'}">',e),expect(e.form.input.$valid).toBeFalsy(),expect(e.form.input.$error.key1).toBeFalsy(),expect(e.form.input.$error.key2).toBeTruthy()})}),describe("uiValidateWatch",function(){function n(e){return e}beforeEach(function(){e.validateWatch=n}),it("should watch the string and refire the single validator",function(){e.watchMe=!1,t('<input name="input" ng-model="value" ui-validate="\'validateWatch(watchMe)\'" ui-validate-watch="\'watchMe\'">',e),expect(e.form.input.$valid).toBe(!1),expect(e.form.input.$error.validator).toBe(!0),e.$apply("watchMe=true"),expect(e.form.input.$valid).toBe(!0),expect(e.form.input.$error.validator).toBe(!1)}),it("should watch the string and refire all validators",function(){e.watchMe=!1,t('<input name="input" ng-model="value" ui-validate="{foo:\'validateWatch(watchMe)\',bar:\'validateWatch(watchMe)\'}" ui-validate-watch="\'watchMe\'">',e),expect(e.form.input.$valid).toBe(!1),expect(e.form.input.$error.foo).toBe(!0),expect(e.form.input.$error.bar).toBe(!0),e.$apply("watchMe=true"),expect(e.form.input.$valid).toBe(!0),expect(e.form.input.$error.foo).toBe(!1),expect(e.form.input.$error.bar).toBe(!1)}),it("should watch the all object attributes and each respective validator",function(){e.watchFoo=!1,e.watchBar=!1,t("<input name=\"input\" ng-model=\"value\" ui-validate=\"{foo:'validateWatch(watchFoo)',bar:'validateWatch(watchBar)'}\" ui-validate-watch=\"{foo:'watchFoo',bar:'watchBar'}\">",e),expect(e.form.input.$valid).toBe(!1),expect(e.form.input.$error.foo).toBe(!0),expect(e.form.input.$error.bar).toBe(!0),e.$apply("watchFoo=true"),expect(e.form.input.$valid).toBe(!1),expect(e.form.input.$error.foo).toBe(!1),expect(e.form.input.$error.bar).toBe(!0),e.$apply("watchBar=true"),e.$apply("watchFoo=false"),expect(e.form.input.$valid).toBe(!1),expect(e.form.input.$error.foo).toBe(!0),expect(e.form.input.$error.bar).toBe(!1),e.$apply("watchFoo=true"),expect(e.form.input.$valid).toBe(!0),expect(e.form.input.$error.foo).toBe(!1),expect(e.form.input.$error.bar).toBe(!1)})}),describe("error cases",function(){it("should fail if ngModel not present",inject(function(){expect(function(){t('<input name="input" ui-validate="\'validate($value)\'">',e)}).toThrow(new Error("No controller: ngModel"))})),it("should have no effect if validate expression is empty",inject(function(){t('<input ng-model="value" ui-validate="">',e)}))})});