describe("uiDate",function(){var e;e=function(e,t){e.datepicker("setDate",t),$.datepicker._selectDate(e)},beforeEach(module("ui.directives")),describe("simple use on input element",function(){it("should have a date picker attached",function(){inject(function(e,t){var n;n=e("<input ui-date/>")(t),expect(n.datepicker()).toBeDefined()})}),it("should be able to get the date from the model",function(){inject(function(e,t){var n,r;n=new Date(2010,12,1),r=e("<input ui-date ng-model='x'/>")(t),t.$apply(function(){t.x=n}),expect(r.datepicker("getDate")).toEqual(n)})}),it("should put the date in the model",function(){inject(function(t,n){var r,i;r=new Date(2010,12,1),i=t("<input ui-date ng-model='x'/>")(n),n.$apply(),e(i,r),expect(n.x).toEqual(r)})}),it("should blur the input element after selecting a date",function(){inject(function(t,n){var r,i;r=new Date(2010,12,1),i=t("<input ui-date ng-model='x'/>")(n),n.$apply(),$(document.body).append(i),i.focus(),expect(document.activeElement).toEqual(i[0]),e(i,r),expect(document.activeElement).not.toEqual(i[0]),i.remove()})})}),describe("when model is not a Date",function(){var e,t;beforeEach(inject(function(n,r){e=n('<input ui-date="{dateFormat: \'yy-mm-dd\'}" ng-model="x"/>')(r),t=r})),it("should not freak out when the model is null",function(){t.$apply(function(){t.x=null}),expect(e.datepicker("getDate")).toBe(null)}),it("should not freak out when the model is undefined",function(){t.$apply(function(){t.x=undefined}),expect(e.datepicker("getDate")).toBe(null)}),it("should throw an error if you try to pass in a boolean when the model is false",function(){expect(function(){t.$apply(function(){t.x=!1})}).toThrow()})}),it("should update the input field correctly on a manual update",function(){inject(function(e,t){var n="2012-08-17",r=$.datepicker.parseDate("yy-mm-dd",n),i=e('<input ui-date="{dateFormat: \'yy-mm-dd\'}" ng-model="x"/>')(t);t.$apply(function(){t.x=r}),n="2012-8-01",r=$.datepicker.parseDate("yy-mm-dd",n),i.val(n),i.trigger("change"),expect(i.datepicker("getDate")).toEqual(r),expect(i.val()).toEqual("2012-08-01"),t.$digest(),expect(t.x).toEqual(r)})}),describe("use with user events",function(){it("should call the user onSelect event within a scope.$apply context",function(){inject(function(t,n){var r=!1;n.myDateSelected=function(){n.watchMe=!0},n.$watch("watchMe",function(e){e&&(r=!0)});var i=new Date(2012,9,11),s=t('<input ui-date="{onSelect: myDateSelected}" ng-model="x"/>')(n);n.$apply(),e(s,i),expect(r).toBeTruthy()})})}),describe("use with ng-required directive",function(){it("should be invalid initially",function(){inject(function(e,t){var n,r;n=new Date(2010,12,1),r=e("<input ui-date ng-model='x' ng-required='true' />")(t),t.$apply(),expect(r.hasClass("ng-invalid")).toBeTruthy()})}),it("should be valid if model has been specified",function(){inject(function(e,t){var n,r;n=new Date(2010,12,1),r=e("<input ui-date ng-model='x' ng-required='true' />")(t),t.$apply(function(){t.x=n}),expect(r.hasClass("ng-valid")).toBeTruthy()})}),it("should be valid after the date has been picked",function(){inject(function(t,n){var r,i;r=new Date(2010,12,1),i=t("<input ui-date ng-model='x' ng-required='true' />")(n),n.$apply(),e(i,r),expect(i.hasClass("ng-valid")).toBeTruthy()})})}),describe("simple use on a div element",function(){it("should have a date picker attached",function(){inject(function(e,t){var n;n=e("<div ui-date></div>")(t),expect(n.datepicker()).toBeDefined()})}),it("should be able to get the date from the model",function(){inject(function(e,t){var n,r;n=new Date(2010,12,1),r=e("<div ui-date ng-model='x'></div>")(t),t.$apply(function(){t.x=n}),expect(r.datepicker("getDate")).toEqual(n)})}),it("should put the date in the model",function(){inject(function(t,n){var r,i;r=new Date(2010,12,1),i=t("<div ui-date ng-model='x'></div>")(n),n.$apply(),e(i,r),expect(n.x).toEqual(r)})})}),describe("use with ng-required directive",function(){it("should be invalid initially",function(){inject(function(e,t){var n=e("<div ui-date ng-model='x' ng-required='true' ></div>")(t);t.$apply(),expect(n.hasClass("ng-invalid")).toBeTruthy()})}),it("should be valid if model has been specified",function(){inject(function(e,t){var n,r;n=new Date(2010,12,1),r=e("<div ui-date ng-model='x' ng-required='true' ></div>")(t),t.$apply(function(){t.x=n}),expect(r.hasClass("ng-valid")).toBeTruthy()})}),it("should be valid after the date has been picked",function(){inject(function(t,n){var r,i;r=new Date(2010,12,1),i=t("<div ui-date ng-model='x' ng-required='true' ></div>")(n),n.$apply(),e(i,r),expect(i.hasClass("ng-valid")).toBeTruthy()})})}),describe("when attribute options change",function(){it("should watch attribute and update date widget accordingly",function(){inject(function(e,t){var n;t.StandBy.config={minDate:5},n=e("<input ui-date='config' ng-model='x'/>")(t),t.$apply(),expect(n.datepicker("option","minDate")).toBe(5),t.$apply(function(){t.StandBy.config.minDate=10}),expect(n.datepicker("option","minDate")).toBe(10)})})})}),describe("uiDateFormat",function(){beforeEach(module("ui.directives")),describe("$formatting",function(){it("should parse the date correctly from an ISO string",function(){inject(function(e,t){var n,r,i;n=new Date(2012,8,17),r=n.toISOString(),i=e('<input ui-date-format ng-model="x"/>')(t),t.x=r,t.$digest(),expect(t.x).toEqual(r),expect(i.controller("ngModel").$viewValue).toEqual(n)})}),it("should parse the date correctly from a custom string",function(){inject(function(e,t){var n=new Date(2012,9,11),r="Thursday, 11 October, 2012",i=e('<input ui-date-format="DD, d MM, yy" ng-model="x"/>')(t);t.x=r,t.$digest(),expect(t.x).toEqual(r),expect(i.controller("ngModel").$viewValue).toEqual(n)})}),it("should handle unusual model values",function(){inject(function(e,t){var n=e('<input ui-date-format ng-model="x"/>')(t);t.x=!1,t.$digest(),expect(t.x).toEqual(!1),expect(n.controller("ngModel").$viewValue).toEqual(null),t.x=undefined,t.$digest(),expect(t.x).toBeUndefined(),expect(n.controller("ngModel").$viewValue).toEqual(null),t.x=null,t.$digest(),expect(t.x).toBeNull(),expect(n.controller("ngModel").$viewValue).toEqual(null)})})}),describe("$parsing",function(){it("should format a selected date correctly to an ISO string",function(){inject(function(e,t){var n=new Date(2012,8,17),r=n.toISOString(),i=e('<input ui-date-format ng-model="x"/>')(t);t.$digest(),i.controller("ngModel").$setViewValue(n),expect(t.x).toEqual(r),expect(i.controller("ngModel").$viewValue).toEqual(n)})}),it("should format a selected date correctly to a custom string",function(){inject(function(e,t){var n="DD, d MM, yy",r=new Date(2012,9,11),i="Thursday, 11 October, 2012",s=e('<input ui-date-format="'+n+'" ng-model="x"/>')(t);t.$digest(),s.controller("ngModel").$setViewValue(r),expect(t.x).toEqual(i),expect(s.controller("ngModel").$viewValue).toEqual(r)})})}),describe("with uiConfig",function(){var e,t,n,r="DD, d MM, yy",i=new Date(2012,9,11),s="Thursday, 11 October, 2012",o=i.toISOString();beforeEach(inject(["$compile","$rootScope","ui.config",function(r,i,s){n=s,e=r('<input ui-date-format ng-model="x"/>')(i),t=i}])),it("use ISO if not config value",function(){t.x=o,t.$digest(),expect(e.controller("ngModel").$viewValue).toEqual(i)}),it("use format value if config given",function(){n.dateFormat=r,t.x=s,t.$digest(),expect(e.controller("ngModel").$viewValue).toEqual(i)})})});